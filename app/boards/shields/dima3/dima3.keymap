/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NUM     3
#define THIRD   4


/ {
    keymap {
        compatible = "zmk,keymap";
        default_layer {
// 10 + 29 = W
// 24 + 29 = X

            bindings = <
&kp GRAVE     &kp Q &kp W &kp E    &kp R       &kp T                                                                         &kp Y            &kp U     &kp I     &kp O    &kp P     &kp LBRC
&mt LCTL ESC  &kp A &kp S &kp D    &kp F       &kp G                                                                         &kp H            &kp J     &kp K     &kp L    &kp SEMI  &kp SQT
&kp LALT      &kp Z &kp X &kp C    &kp V       &kp B         &mo NUM                                        &kp LGUI(SPACE)  &kp N            &kp M     &kp COMMA &kp DOT  &kp FSLH  &kp RBRC
                          &kp LGUI &kp LS(TAB) &lt RAISE TAB &mt LSHFT SPACE &lt LOWER DEL    &lt LOWER ESC &mt RSHFT BSPC   &lt RAISE ENTER  &kp RSHFT &kp NUBS
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        lower_layer {
          bindings = <
&kp F12         &kp F1   &kp F2 &kp F3   &kp F4   &kp F5                                          &kp F6          &kp F7    &kp F8    &kp F9   &kp F10  &kp F11
&mt LCTL PLUS   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT                                       &kp CARET       &kp AMPS  &kp STAR  &kp LPAR &kp RPAR &kp UNDER
&mt LALT EQAUL  &kp 1    &kp 2  &kp 3    &kp 4    &kp 5         &trans                     &trans &kp 6           &kp 7     &kp 8     &kp 9    &kp 0    &mt RALT MINUS
                                &trans   &trans   &lt THIRD TAB &trans &trans       &trans &trans &lt THIRD ENTER &trans    &trans
          >;
        };
        raise_layer {
          bindings = <
&trans    &kp LSCR  &kp PGUP      &kp UP    &kp LC(HOME) &kp C_VOL_UP                                                 &kp RA(T) &kp HOME  &kp UP    &kp PGUP &kp LSCR &trans
&kp LCTL  &kp INS   &kp LC(LEFT)  &kp DOWN  &kp LC(RGHT) &kp C_PP                                                 &kp MUTE  &kp LEFT  &kp DOWN  &kp RGHT &kp INS  &kp RCTL
&trans    &kp PAUS  &kp PGDN      &kp PSCR  &kp LC(END)  &kp C_VOL_DN &trans                                  &trans  &kp RA(M) &kp END   &kp PSCR  &kp PGDN &kp PAUS &trans
                                  &trans    &trans       &trans   &trans &lt THIRD DEL     &lt THIRD ESC  &trans  &trans    &trans    &trans
          >;
        };
        num_layer {
 bindings = <
&kp KP_NUM &kp KP_SLASH     &kp KP_N7  &kp KP_N8 &kp KP_N9 &kp KP_MINUS                                 &kp RA(KC_T)  &kp trans  &kp trans          &kp trans          &trans           &kp trans
&kp K_CALC &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5 &kp KP_N6 &kp KP_PLUS                                  &trans          &kp trans  &kp trans          &kp trans          &trans           &kp trans
&kp DOT    &kp KP_N0        &kp KP_N1  &kp KP_N2 &kp KP_N3 &kp DOT     &trans                   &trans  &kp trans       &kp trans  &kp RA(COMMA)    &kp RA(DOT)       &kp RA(FSLH)  &kp RA(RBRC)
                                        &trans   &trans    &trans       &trans  &trans  &trans   &trans &trans          &trans     &kp RA(NUBS)
  >;
        };
        third_layer {
          bindings = <
&trans  &trans      &trans          &trans        &trans        &trans                                         &trans &trans       &trans  &trans &trans &trans
&trans  &trans      &trans          &trans        &trans        &trans                                         &trans &trans       &trans  &trans &trans &trans
&trans  &bt BT_CLR  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt K_LOCK  &trans                     &trans  &trans &trans       &trans  &trans &trans &trans
                                    &trans        &bootloader   &trans      &trans   &trans    &trans  &trans  &trans &bootloader  &trans
          >;
        };
    };
};
